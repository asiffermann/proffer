name: Continuous Integration

on:
  push:
    branches: [ trunk ]
  pull_request:
    branches: [ trunk ]

jobs:
  build:
    name: Build, Test & Package

    runs-on: ubuntu-latest

    outputs:
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.9
      with:
        useConfigFile: true
        configFilePath: gitversion.yml

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release -p:Version=${{ steps.gitversion.outputs.fullSemVer }}

    - name: Test
      run: dotnet test --no-build --configuration Release --logger trx --collect "XPlat Code Coverage" --results-directory "tests-results" --settings coverlet.runsettings
      env:
        "Email:Provider:Parameters:Key": ${{ secrets.SENDGRIDKEY }}

    - name: Upload tests results artifacts
      uses: actions/upload-artifact@v2
      with:
        name: tests-results
        path: tests-results
      if: ${{ always() }}

    - name: Get path to the lcov code coverage file
      id: get-lcov-path
      shell: bash
      run: printf '::set-output name=lcov-path::%s\n' tests-results/*/coverage.info

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v1.1.2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ${{ steps.get-lcov-path.outputs.lcov-path }}

    - name: Pack
      run: dotnet pack --no-build --configuration Release --output ./packages -p:PackageVersion=${{ steps.gitversion.outputs.fullSemVer }}

    - name: Upload packages artifacts
      uses: actions/upload-artifact@v2
      with:
        name: packages
        path: packages

  publish-to-gpr:
    name: Publish to GitHub Packages

    needs: build
    if: contains(needs.build.outputs.fullSemVer, 'rc')

    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Download packages artifacts
      uses: actions/download-artifact@v2
      with:
        name: packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        source-url: https://nuget.pkg.github.com/asiffermann/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Publish packages to GPR
      run: dotnet nuget push --api-key ${{ secrets.GITHUB_TOKEN }} *.nupkg